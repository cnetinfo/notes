{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/plugins/resolve.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/css.ts","../src/node/plugins/index.ts","../src/node/pluginContainer.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/transform.ts"],"sourcesContent":["import cac from \"cac\"\r\nimport { startDevServer } from \"./server\"\r\n\r\nconst cli = cac()\r\n\r\ncli\r\n  .command(\"[root]\", \"Run the development server\")\r\n  .alias(\"serve\")\r\n  .alias(\"dev\")\r\n  .action(async () => {\r\n    await startDevServer()\r\n  })\r\n\r\ncli.help()\r\n\r\ncli.parse()\r\n","import connect from \"connect\"\r\nimport { blue, green } from \"picocolors\"\r\n\r\nimport { optimize } from '../optimizer'\r\nimport { resolvePlugins } from '../plugins'\r\nimport { Plugin } from \"../plugin\";\r\nimport { createPluginContainer, PluginContainer } from '../pluginContainer'\r\n\r\nimport { indexHtmlMiddware } from './middlewares/indexHtml'\r\nimport { transformMiddleware } from \"./middlewares/transform\";\r\n\r\nexport interface ServerContext {\r\n  root: string;\r\n  pluginContainer: PluginContainer;\r\n  app: connect.Server;\r\n  plugins: Plugin[]\r\n}\r\n\r\nexport async function startDevServer() {\r\n  const app = connect()\r\n  const root = process.cwd()\r\n  const startTime = Date.now()\r\n\r\n  const plugins = resolvePlugins()\r\n  const pluginContainer = createPluginContainer(plugins)\r\n\r\n  const serverContext: ServerContext = {\r\n    root: process.cwd(),\r\n    app,\r\n    pluginContainer,\r\n    plugins\r\n  }\r\n\r\n  for (const plugin of plugins) {\r\n    if (plugin.configureServer) {\r\n      await plugin.configureServer(serverContext)\r\n    }\r\n  }\r\n\r\n  // 核心编译逻辑\r\n  app.use(transformMiddleware(serverContext))\r\n  // 处理入口 HTML 资源\r\n  app.use(indexHtmlMiddware(serverContext))\r\n\r\n  app.listen(3000, async () => {\r\n    await optimize(root)\r\n\r\n    console.log(\r\n      green(\"🚀 No-Bundle 服务已经成功启动!\"),\r\n      `耗时: ${Date.now() - startTime}ms`\r\n    )\r\n    console.log(`> 本地访问路径: ${blue(\"http://localhost:3000\")}`)\r\n  })\r\n}\r\n","import path from 'path'\r\nimport { build } from \"esbuild\";\r\nimport { green } from 'picocolors'\r\nimport { scanPlugin } from './scanPlugin'\r\n\r\nimport { preBundlePlugin } from \"./preBundlePlugin\";\r\nimport { PRE_BUNDLE_DIR } from \"../constants\";\r\n\r\nexport async function optimize(root: string) {\r\n  // 1. 确认入口\r\n  const entry = path.resolve(root, 'src/main.tsx')\r\n\r\n  // 2. 从入口处扫描依赖\r\n  const deps = new Set<string>()\r\n\r\n  await build({\r\n    entryPoints: [entry],\r\n    bundle: true,\r\n    write: false,\r\n    plugins: [ scanPlugin(deps) ]\r\n  })\r\n\r\n  console.log(\r\n    `${green(\"需要预构建的依赖\")}:\\n${[...deps]\r\n    .map(green)\r\n    .map((item) => `  ${item}`)\r\n    .join(\"\\n\")}`\r\n  )\r\n\r\n  // 3. 预构建依赖\r\n  await build({\r\n    entryPoints: [...deps],\r\n    write: true,\r\n    bundle: true,\r\n    format: \"esm\",\r\n    splitting: true,\r\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\r\n    plugins: [preBundlePlugin(deps)]\r\n  })\r\n}","import path from 'path'\r\n\r\nexport const EXTERNAL_TYPES = [\r\n  \"css\",\r\n  \"less\",\r\n  \"sass\",\r\n  \"scss\",\r\n  \"styl\",\r\n  \"stylus\",\r\n  \"pcss\",\r\n  \"postcss\",\r\n  \"vue\",\r\n  \"svelte\",\r\n  \"marko\",\r\n  \"astro\",\r\n  \"png\",\r\n  \"jpe?g\",\r\n  \"gif\",\r\n  \"svg\",\r\n  \"ico\",\r\n  \"webp\",\r\n  \"avif\",\r\n]\r\n\r\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/\r\n\r\n// 预构建产物默认存放在 node_modules 中的 .vite 目录中\r\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".vite\")\r\n\r\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/\r\nexport const QEURY_RE = /\\?.*$/s\r\nexport const HASH_RE = /#.*$/s\r\n\r\nexport const DEFAULT_EXTERSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];","import { Plugin } from \"esbuild\"\r\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from \"../constants\"\r\n\r\nexport function scanPlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: \"esbuild:scan-deps\",\r\n    setup(build) {\r\n      // 忽略的文件类型\r\n      build.onResolve(\r\n        { filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`) },\r\n        (resolveInfo) => {\r\n          return {\r\n            path: resolveInfo.path,\r\n            // 打上 external 标记\r\n            external: true,\r\n          }\r\n        }\r\n      )\r\n      // 记录依赖\r\n      build.onResolve(\r\n        {\r\n          filter: BARE_IMPORT_RE,\r\n        },\r\n        (resolveInfo) => {\r\n          const { path: id } = resolveInfo\r\n          // 推入 deps 集合中\r\n          deps.add(id)\r\n          return {\r\n            path: id,\r\n            external: true,\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n}","import { Loader, Plugin } from \"esbuild\"\r\nimport { BARE_IMPORT_RE } from \"../constants\"\r\n\r\n// 用来分析 es 模块 import/export 语句的库\r\nimport { init, parse } from \"es-module-lexer\"\r\nimport path from \"path\"\r\n// 一个实现了 node 路径解析算法的库\r\nimport resolve from \"resolve\"\r\n// 一个更加好用的文件操作库\r\nimport fs from \"fs-extra\"\r\n// 用来开发打印 debug 日志的库\r\nimport createDebug from \"debug\"\r\n\r\nimport{ normalizePath } from '../utils'\r\n\r\nconst debug = createDebug(\"dev\")\r\n\r\nexport function preBundlePlugin(deps: Set<string>): Plugin {\r\n  return {\r\n    name: \"esbuild:pre-bundle\",\r\n    setup(build) {\r\n      build.onResolve(\r\n        {\r\n          filter: BARE_IMPORT_RE,\r\n        },\r\n        (resolveInfo) => {\r\n          const { path: id, importer } = resolveInfo\r\n          const isEntry = !importer\r\n\r\n          // 命中需要预编译的依赖\r\n          if (deps.has(id)) {\r\n            // 若为入口，则标记 dep 的 \r\n            \r\n            return isEntry\r\n              ? {\r\n                  path: id,\r\n                  namespace: \"dep\",\r\n                }\r\n              : {\r\n                  // 因为走到 onResolve 了，所以这里的 path 就是绝对路径了\r\n                  path: resolve.sync(id, { basedir: process.cwd() }),\r\n                }\r\n          }\r\n        }\r\n      )\r\n\r\n      // 拿到标记后的依赖，构造代理模块，交给 esbuild 打包\r\n      build.onLoad(\r\n        {\r\n          filter: /.*/,\r\n          namespace: \"dep\",\r\n        },\r\n        async (loadInfo) => {\r\n          await init\r\n          \r\n          const id = loadInfo.path\r\n          const root = process.cwd()\r\n\r\n          const entryPath = resolve.sync(id, { basedir: root })\r\n\r\n          const code = await fs.readFile(entryPath, \"utf-8\")\r\n          const [imports, exports] = await parse(code)\r\n\r\n          let relativePath = normalizePath(path.relative(root, entryPath))\r\n          if (\r\n            !relativePath.startsWith('./') &&\r\n            !relativePath.startsWith('../') &&\r\n            relativePath !== '.'\r\n          ) {\r\n            relativePath = `./${relativePath}`\r\n          }\r\n\r\n          let proxyModule = []\r\n\r\n          // cjs\r\n          if (!imports.length && !exports.length) {\r\n            // 构造代理模块\r\n            const res = require(entryPath)\r\n            const specifiers = Object.keys(res)\r\n            proxyModule.push(\r\n              `export { ${specifiers.join(\",\")} } from \"${relativePath}\"`,\r\n              `export default require(\"${relativePath}\")`\r\n            )\r\n          } else {\r\n            // esm 格式比较好处理，export * 或者 export default 即可\r\n            if (exports.includes(\"default\")) {\r\n              proxyModule.push(`import d from \"${relativePath}\"export default d`)\r\n            }\r\n            proxyModule.push(`export * from \"${relativePath}\"`)\r\n          }\r\n          debug(\"代理模块内容: %o\", proxyModule.join(\"\\n\"))\r\n          const loader = path.extname(entryPath).slice(1)\r\n\r\n          return {\r\n            loader: loader as Loader,\r\n            contents: proxyModule.join(\"\\n\"),\r\n            resolveDir: root,\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n}","import path from 'path'\r\nimport os from 'os'\r\nimport { JS_TYPES_RE, HASH_RE, QEURY_RE } from './constants.ts'\r\n\r\nexport function slash(p: string): string {\r\n  return p.replace(/\\\\/g, '/')\r\n}\r\nexport const isWindows = os.platform() === 'win32'\r\n\r\nexport function normalizePath(id: string): string {\r\n  return path.posix.normalize(isWindows ? slash(id) : id)\r\n}\r\n\r\nexport const isJSRequest = (id: string): boolean => {\r\n  id = cleanUrl(id)\r\n  if (JS_TYPES_RE.test(id)) {\r\n    return true\r\n  }\r\n  if (!path.extname(id) && !id.endsWith(\"/\")) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport const isCSSRequest = (id: string): boolean =>\r\n  cleanUrl(id).endsWith(\".css\")\r\n\r\nexport const cleanUrl = (url: string): string =>\r\n  url.replace(HASH_RE, \"\").replace(QEURY_RE, \"\")\r\n  ","import resolve from \"resolve\"\r\nimport path from \"path\"\r\nimport { pathExists } from \"fs-extra\"\r\n\r\nimport { Plugin } from \"../plugin\"\r\nimport { ServerContext } from \"../server/index\"\r\nimport { DEFAULT_EXTERSIONS } from \"../constants\"\r\nimport { cleanUrl } from \"../utils\"\r\n\r\nexport function resolvePlugin(): Plugin {\r\n  let serverContext: ServerContext\r\n  return {\r\n    name: \"vite:resolve\",\r\n    configureServer(s) {\r\n      // 保存服务端上下文\r\n      serverContext = s\r\n    },\r\n    async resolveId(id: string, importer?: string) {\r\n      // 1. 绝对路径\r\n      if (path.isAbsolute(id)) {\r\n        if (await pathExists(id)) {\r\n          return { id }\r\n        }\r\n        // 加上 root 路径前缀，处理 /src/main.tsx 的情况\r\n        id = path.join(serverContext.root, id)\r\n        if (await pathExists(id)) {\r\n          return { id }\r\n        }\r\n      }\r\n      // 2. 相对路径\r\n      else if (id.startsWith(\".\")) {\r\n        if (!importer) {\r\n          throw new Error(\"`importer` should not be undefined\")\r\n        }\r\n        const hasExtension = path.extname(id).length > 1\r\n        let resolvedId: string\r\n        // 2.1 包含文件名后缀\r\n        // 如 ./App.tsx\r\n        if (hasExtension) {\r\n          resolvedId = resolve.sync(id, { basedir: path.dirname(importer) })\r\n          if (await pathExists(resolvedId)) {\r\n            // return { id: resolvedId }\r\n            return { id }\r\n          }\r\n        } \r\n        // 2.2 不包含文件名后缀\r\n        // 如 ./App\r\n        else {\r\n          // ./App -> ./App.tsx\r\n          for (const extname of DEFAULT_EXTERSIONS) {\r\n            try {\r\n              const withExtension = `${id}${extname}`\r\n              resolvedId = resolve.sync(withExtension, {\r\n                basedir: path.dirname(importer),\r\n              })\r\n              if (await pathExists(resolvedId)) {\r\n                // return { id: resolvedId }\r\n                return { id: withExtension }\r\n              }\r\n            } catch (e) {\r\n              continue\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import esbuild from \"esbuild\"\r\nimport path from \"path\"\r\nimport { readFile } from \"fs-extra\"\r\n\r\nimport { Plugin } from \"../plugin\"\r\nimport { isJSRequest } from \"../utils\"\r\n\r\nexport function esbuildTransformPlugin(): Plugin {\r\n  return {\r\n    name: \"vite:esbuild-transform\",\r\n    // 加载模块\r\n    async load(id) {\r\n      if (isJSRequest(id)) {\r\n        try {\r\n          const code = await readFile(id, \"utf-8\")\r\n          return code\r\n        } catch (e) {\r\n          return null\r\n        }\r\n      }\r\n    },\r\n    async transform(code, id) {\r\n      if (isJSRequest(id)) {\r\n        const extname = path.extname(id).slice(1)\r\n        const { code: transformedCode, map } = await esbuild.transform(code, {\r\n          target: \"esnext\",\r\n          format: \"esm\",\r\n          sourcemap: true,\r\n          loader: extname as \"js\" | \"ts\" | \"jsx\" | \"tsx\",\r\n        })\r\n        return {\r\n          code: transformedCode,\r\n          map,\r\n        }\r\n      }\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import { pathExists } from \"fs-extra\"\r\nimport resolve from \"resolve\"\r\nimport path from \"path\"\r\n// magic-string 用来作字符串编辑\r\nimport MagicString from \"magic-string\" \r\nimport { init, parse } from \"es-module-lexer\"\r\n\r\nimport {\r\n  BARE_IMPORT_RE,\r\n  DEFAULT_EXTERSIONS,\r\n  PRE_BUNDLE_DIR,\r\n} from \"../constants\"\r\nimport {\r\n  cleanUrl,\r\n  isJSRequest,\r\n  normalizePath\r\n} from \"../utils\"\r\n\r\nimport { Plugin } from \"../plugin\"\r\nimport { ServerContext } from \"../server/index\"\r\n\r\nexport function importAnalysisPlugin(): Plugin {\r\n  let serverContext: ServerContext\r\n  return {\r\n    name: \"vite:import-analysis\",\r\n    configureServer(s) {\r\n      // 保存服务端上下文\r\n      serverContext = s\r\n    },\r\n    async transform(code: string, id: string) {\r\n      // 只处理 JS 相关的请求\r\n      if (!isJSRequest(id)) {\r\n        return null\r\n      }\r\n      await init\r\n      // 解析 import 语句\r\n      const [imports] = parse(code)\r\n      const ms = new MagicString(code)\r\n      // 对每一个 import 语句依次进行分析\r\n      for (const importInfo of imports) {\r\n        // 举例说明: const str = `import React from 'react'`\r\n        // str.slice(s, e) => 'react'\r\n        const { s: modStart, e: modEnd, n: modSource } = importInfo\r\n        \r\n        if (!modSource) continue\r\n        // 第三方库: 路径重写到预构建产物的路径\r\n        if (BARE_IMPORT_RE.test(modSource)) {\r\n          // const bundlePath = path.join(\r\n          //   serverContext.root,\r\n          //   PRE_BUNDLE_DIR,\r\n          //   `${modSource}.js`\r\n          // )\r\n          const bundlePath = normalizePath(\r\n            path.join('/', PRE_BUNDLE_DIR, `${modSource}.js`)\r\n          )\r\n          ms.overwrite(modStart, modEnd, bundlePath)\r\n        } else if (modSource.startsWith(\".\") || modSource.startsWith(\"/\")) {\r\n          // 直接调用插件上下文的 resolve 方法，会自动经过路径解析插件的处理\r\n          const resolved = await this.resolve(modSource, id)\r\n          if (resolved) {\r\n            ms.overwrite(modStart, modEnd, resolved.id)\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        code: ms.toString(),\r\n        // 生成 SourceMap\r\n        map: ms.generateMap(),\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { readFile } from \"fs-extra\"\r\nimport { Plugin } from \"../plugin\"\r\n\r\nexport function cssPlugin(): Plugin {\r\n  return {\r\n    name: \"vite:css\",\r\n    load(id) {\r\n      // 加载\r\n      if (id.endsWith(\".css\")) {\r\n        return readFile(id, \"utf-8\")\r\n      }\r\n    },\r\n    // 转换逻辑\r\n    async transform(code, id) {\r\n      if (id.endsWith(\".css\")) {\r\n        // 包装成 JS 模块\r\n        const jsContent = `\r\n          const css = '${code.replace(/\\n/g, \"\")}'\r\n          const style = document.createElement(\"style\")\r\n          style.setAttribute(\"type\", \"text/css\")\r\n          style.innerHTML = css\r\n          document.head.appendChild(style)\r\n          export default css`.trim()\r\n        return {\r\n          code: jsContent,\r\n        }\r\n      }\r\n      return null\r\n    }\r\n  }\r\n}\r\n","import { Plugin } from \"../plugin\"\r\n\r\nimport { resolvePlugin } from \"./resolve\"\r\nimport { esbuildTransformPlugin } from \"./esbuild\"\r\nimport { importAnalysisPlugin } from \"./importAnalysis\"\r\nimport { cssPlugin } from \"./css\"\r\n\r\nexport function resolvePlugins(): Plugin[] {\r\n  return [\r\n    resolvePlugin(),\r\n    esbuildTransformPlugin(),\r\n    importAnalysisPlugin(),\r\n    cssPlugin()\r\n  ]\r\n}\r\n","import type {\r\n  LoadResult,\r\n  PartialResolvedId,\r\n  SourceDescription,\r\n  PluginContext as RollupPluginContext,\r\n  ResolvedId,\r\n} from \"rollup\";\r\n\r\nexport interface PluginContainer {\r\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\r\n  load(id: string): Promise<LoadResult | null>;\r\n  transform(code: string, id: string): Promise<SourceDescription | null>;\r\n}\r\n\r\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\r\n  // 插件上下文对象\r\n  // @ts-ignore \r\n  class Context implements RollupPluginContext {\r\n    // 这里仅实现上下文对象的 resolve 方法\r\n    async resolve(id: string, importer?: string) {\r\n      let out = await pluginContainer.resolveId(id, importer)\r\n      if (typeof out === \"string\") out = { id: out }\r\n      return out as ResolvedId | null\r\n    }\r\n  }\r\n\r\n  // 插件容器\r\n  const pluginContainer: PluginContainer = {\r\n    async resolveId(id: string, importer?: string) {\r\n      const ctx = new Context() as any\r\n      for (const plugin of plugins) {\r\n        if (plugin.resolveId) {\r\n          const newId = await plugin.resolveId.call(ctx as any, id, importer)\r\n          if (newId) {\r\n            id = typeof newId === \"string\" ? newId : newId.id\r\n            return { id }\r\n          }\r\n        }\r\n      }\r\n      return null\r\n    },\r\n    async load(id) {\r\n      const ctx = new Context() as any\r\n      for (const plugin of plugins) {\r\n        if (plugin.load) {\r\n          const result = await plugin.load.call(ctx, id)\r\n          if (result) {\r\n            return result\r\n          }\r\n        }\r\n      }\r\n      return null\r\n    },\r\n    async transform(code, id) {\r\n      const ctx = new Context() as any\r\n      for (const plugin of plugins) {\r\n        if (plugin.transform) {\r\n          const result = await plugin.transform.call(ctx, code, id)\r\n          if (!result) continue\r\n          if (typeof result === \"string\") {\r\n            code = result\r\n          } else if (result.code) {\r\n            code = result.code\r\n          }\r\n        }\r\n      }\r\n      return { code }\r\n    }\r\n  }\r\n\r\n  return pluginContainer\r\n}\r\n","import { NextHandleFunction } from \"connect\"\r\nimport path from \"path\"\r\nimport { pathExists, readFile } from \"fs-extra\"\r\nimport { ServerContext } from \"../index\"\r\n\r\nexport function indexHtmlMiddware(\r\n  serverContext: ServerContext\r\n): NextHandleFunction {\r\n  return async (req, res, next) => {\r\n    if (req.url === \"/\") {\r\n      const { root } = serverContext\r\n\r\n      // 默认使用项目根目录下的 index.html\r\n      const indexHtmlPath = path.join(root, \"index.html\")\r\n\r\n      if (await pathExists(indexHtmlPath)) {\r\n        const rawHtml = await readFile(indexHtmlPath, \"utf8\")\r\n\r\n        let html = rawHtml\r\n\r\n        // 通过执行插件的 transformIndexHtml 方法来对 HTML 进行自定义的修改\r\n        for (const plugin of serverContext.plugins) {\r\n          if (plugin.transformIndexHtml) {\r\n            html = await plugin.transformIndexHtml(html)\r\n          }\r\n        }\r\n\r\n        res.statusCode = 200\r\n        res.setHeader(\"Content-Type\", \"text/html\")\r\n        return res.end(html)\r\n      }\r\n    }\r\n    \r\n    return next()\r\n  }\r\n}\r\n","import { NextHandleFunction } from \"connect\"\r\nimport {\r\n  isJSRequest,\r\n  isCSSRequest,\r\n  cleanUrl,\r\n} from \"../../utils\"\r\nimport { ServerContext } from \"../index\"\r\nimport createDebug from \"debug\"\r\n\r\nconst debug = createDebug(\"dev\")\r\n\r\nexport async function transformRequest(\r\n  url: string,\r\n  serverContext: ServerContext\r\n) {\r\n  const { pluginContainer } = serverContext\r\n\r\n  url = cleanUrl(url)\r\n  \r\n  // 简单来说，就是依次调用插件容器的 resolveId、load、transform 方法\r\n  const resolvedResult = await pluginContainer.resolveId(url)\r\n\r\n  let transformResult\r\n\r\n  if (resolvedResult?.id) {\r\n    let code = await pluginContainer.load(resolvedResult.id)\r\n    if (typeof code === \"object\" && code !== null) {\r\n      code = code.code\r\n    }\r\n    if (code) {\r\n      transformResult = await pluginContainer.transform(\r\n        code as string,\r\n        resolvedResult?.id\r\n      )\r\n    }\r\n  }\r\n  return transformResult\r\n}\r\n\r\nexport function transformMiddleware(\r\n  serverContext: ServerContext\r\n): NextHandleFunction {\r\n  return async (req, res, next) => {\r\n    if (req.method !== \"GET\" || !req.url) {\r\n      return next()\r\n    }\r\n\r\n    const url = req.url\r\n\r\n    debug(\"transformMiddleware: %s\", url)\r\n\r\n    // transform JS request\r\n    if (isJSRequest(url) || isCSSRequest(url)) {\r\n      // 核心编译函数\r\n      let result = await transformRequest(url, serverContext)\r\n\r\n      if (!result) {\r\n        return next()\r\n      }\r\n      if (result && typeof result !== \"string\") {\r\n        result = result.code\r\n      }\r\n\r\n      // 编译完成，返回响应给浏览器\r\n      res.statusCode = 200\r\n      res.setHeader(\"Content-Type\", \"application/javascript\")\r\n      \r\n      return res.end(result)\r\n    }\r\n\r\n    next()\r\n  }\r\n}\r\n"],"mappings":"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","names":["import_picocolors","import_path","path","build","import_path","import_path","os","path","createDebug","build","resolve","fs","path","path","import_resolve","import_path","import_fs_extra","path","resolve","import_esbuild","import_path","import_fs_extra","path","esbuild","import_path","import_es_module_lexer","MagicString","path","import_fs_extra","import_path","import_fs_extra","path","import_debug","debug","createDebug","connect","cac"]}